== ANIMATION FORMAT ==

Hopefully we'll make a program to help us do this.

The animation numbers should start at 0 and go up sequentially. Once the game
sees that an animation number section does not exist, it decides, "oh, we are
done loading animations now. That is all of the animations."

Which animations correspond to which attacks / stances / whatever is not
important. As described in the attack documentation an attack can be assigned
an arbitrary animation. Things like standing, jumping, etc. will face a 
similar configuration structure alongside meta-info like stamina, physics stats
and all that other jazz. So just make animations.

As it's just an INI file comments can be put like this:

;this is a comment.

I highly recommend a comment describing the nature of the animation to make 
assignments easier later. 

Oh, uh, the frameName line of frames is something like this:

stand0.png,stand1.png,stand2.png,crouch1.png,

please end with an ending comma delimeter. My tokenizing function is not great
or perfect but we have 48 hours so just work with it. Sorry.


[Animation number]
	frameName = string[] (filename of the animation frame itself)
	loop = int (-1 to stay on final frame)
	xOff = int[]
	yOff = int[]
	durations = int[]
	box0x = int[] // Body box
	box0y = int[]
	box0w = int[]
	box0h = int[]
	box1x = int[] // Vuln box 1
	box1y = int[]
	box1w = int[]
	box1h = int[]
	box2x = int[] // Vuln box 2
	box2y = int[]
	box2w = int[]
	box2h = int[]
	box3x = int[] // Vuln box 3
	box3y = int[]
	box3w = int[]
	box3h = int[]
	box4x = int[] // Attack box
	box4y = int[]
	box4w = int[]
	box4h = int[]